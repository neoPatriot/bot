from telegram import Update, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
import datetime
import asyncio
import logging
from keyboards import generate_room_selection, generate_calendar
from api_utils import fetch_bookings, extract_times, get_start_time
from booking_utils import fetch_available_slots, submit_booking
from config import ROOM_NAMES, ADMIN_USER_IDS, ROOM_ADMINS, API_BASE_URL, MAIN_MENU_KEYBOARD, BOOKING_BASE_URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
(
    BOOKING_ROOM,
    BOOKING_DATE,
    BOOKING_SLOTS,
    GET_NAME,
    GET_PHONE,
    GET_COMMENT
) = range(4, 10)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è bigZ!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True,
                one_time_keyboard=False
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()

    if text == "–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
        await show_room_selection(update, context, "view")
    elif text == "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
    elif text == "‚ùì –ø–æ–º–æ—â—å":
        await show_help(update, context)
    elif text == "‚ÑπÔ∏è –æ –±–æ—Ç–µ":
        await show_about(update, context)
    elif text == "–æ—Ç–º–µ–Ω–∞":
        await cancel_booking_command(update, context)
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if isinstance(update, CallbackQuery):
        await update.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )
    else:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )


async def show_booking_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–±–æ—Ä –∑–∞–ª–∞)"""
    if isinstance(update, CallbackQuery):
        await update.edit_message_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=generate_room_selection(ROOM_NAMES, prefix="book_room_")
        )
    else:
        await update.message.reply_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=generate_room_selection(ROOM_NAMES, prefix="book_room_")
        )
    return BOOKING_ROOM


async def show_room_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, purpose="view"):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        prefix = "select_room_"
        if purpose == "booking":
            prefix = "book_room_"

        if isinstance(update, CallbackQuery):
            await update.edit_message_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:",
                reply_markup=generate_room_selection(ROOM_NAMES, prefix=prefix)
            )
        else:
            await update.message.reply_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:",
                reply_markup=generate_room_selection(ROOM_NAMES, prefix=prefix)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ –∑–∞–ª–æ–≤: {e}")
        reply_markup = ReplyKeyboardMarkup(
            SCHEDULE_MENU_KEYBOARD if purpose == "view" else MAIN_MENU_KEYBOARD,
            resize_keyboard=True
        )

        if isinstance(update, CallbackQuery):
            await update.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä –∑–∞–ª–æ–≤", reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä –∑–∞–ª–æ–≤", reply_markup=reply_markup)


async def show_calendar(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        selected_room,
        user_id,
        year=None,
        month=None,
        purpose="view"  # 'view' –∏–ª–∏ 'booking'
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞"""
    try:
        now = datetime.datetime.now()
        year = year or now.year
        month = month or now.month

        text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
        if purpose == "view":
            text += " –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        else:
            text += " –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

        if selected_room and selected_room != "all":
            room_name = ROOM_NAMES.get(int(selected_room), selected_room)
            text += f" –∑–∞–ª–∞ {room_name}"

        reply_markup = generate_calendar(
            year=year,
            month=month,
            selected_room=selected_room,
            user_id=user_id,
            room_names=ROOM_NAMES,
            admin_ids=ADMIN_USER_IDS,
            room_admins=ROOM_ADMINS,
            purpose=purpose
        )

        if isinstance(update, Update) and update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        elif isinstance(update, CallbackQuery):
            await update.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        if isinstance(update, Update) and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        elif isinstance(update, CallbackQuery):
            await update.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π\n"
        "2. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –∏ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\n"
        "3. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
        "4. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ \"‚¨ÖÔ∏è\" –∏ \"‚û°Ô∏è\"\n\n"
        "**–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç \"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\", –∑–∞—Ç–µ–º –∑–∞–ª, –¥–∞—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã\n"
        "- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    if isinstance(update, CallbackQuery):
        await update.edit_message_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )
    else:
        await update.message.reply_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )


async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    about_text = (
        "ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π bigZ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "**–¢–µ–∫—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
        "- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ª–∞–º\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "- –í—ã–±–æ—Ä —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n\n"
        "–í–µ—Ä—Å–∏—è: 2.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –õ–µ—à–∏–π\n"
    )

    if isinstance(update, CallbackQuery):
        await update.edit_message_text(
            about_text,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )
    else:
        await update.message.reply_text(
            about_text,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                MAIN_MENU_KEYBOARD,
                resize_keyboard=True
            )
        )


async def handle_callback(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)"""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    try:
        if data.startswith("select_room_"):
            room_selection = data.split("_")[2]
            context.user_data['selected_room'] = room_selection
            await show_calendar(
                query,
                context,
                room_selection,
                user_id,
                purpose="view"
            )

        elif data.startswith("select_"):
            parts = data.split("_")
            year, month, day = int(parts[1]), int(parts[2]), int(parts[3])
            selected_room = context.user_data.get('selected_room', 'all')

            is_admin = user_id in ADMIN_USER_IDS or any(
                user_id in ROOM_ADMINS.get(rid, [])
                for rid in ROOM_ADMINS
            )
            selected_date = datetime.datetime(year, month, day)

            if not is_admin and selected_date.date() < datetime.datetime.now().date():
                await query.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã")
                return

            date_str = f"{year}{month:02d}{day:02d}"
            await query.edit_message_text(f"‚è≥ –ò—â—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {day}.{month}.{year}...")
            bookings = fetch_bookings(date_str, API_BASE_URL)

            if bookings is None:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            await send_bookings(
                context,
                query.message.chat_id,
                bookings,
                user_id,
                selected_room
            )

        elif data.startswith("prev_") or data.startswith("next_"):
            parts = data.split("_")
            year, month = int(parts[1]), int(parts[2])
            selected_room = parts[3] if len(parts) > 3 else None
            if selected_room:
                context.user_data['selected_room'] = selected_room

            purpose = "view"
            if len(parts) > 4 and parts[4] == "book":
                purpose = "booking"

            await show_calendar(
                query,
                context,
                selected_room,
                user_id,
                year,
                month,
                purpose
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}", exc_info=True)
        try:
            await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )


async def send_bookings(
        context: ContextTypes.DEFAULT_TYPE,
        chat_id: int,
        bookings: list,
        user_id: int,
        selected_room: str
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        if selected_room and selected_room != "all":
            bookings = [b for b in bookings if str(b.get('room_id')) == selected_room]

        is_global_admin = user_id in ADMIN_USER_IDS
        is_room_admin = any(
            user_id in ROOM_ADMINS.get(b.get('room_id'), [])
            for b in bookings
        )

        if not bookings:
            if not selected_room or selected_room == "all":
                room_text = "–≤–æ –≤—Å–µ—Ö –∑–∞–ª–∞—Ö"
            else:
                room_name = ROOM_NAMES.get(int(selected_room), f"–∑–∞–ª–µ {selected_room}")
                room_text = f"–≤ {room_name}"

            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üì≠ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É {room_text} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
            return

        bookings_by_room = {}
        for booking in bookings:
            room_id = booking.get('room_id')
            if room_id not in bookings_by_room:
                bookings_by_room[room_id] = []
            bookings_by_room[room_id].append(booking)

        total_count = len(bookings)
        room_count = len(bookings_by_room)

        if selected_room and selected_room != "all":
            room_name = ROOM_NAMES.get(int(selected_room), f"–∑–∞–ª {selected_room}")
            header = f"üìã –ù–∞–π–¥–µ–Ω–æ {total_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ {room_name}:"
        else:
            header = f"üìã –ù–∞–π–¥–µ–Ω–æ {total_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ {room_count} –∑–∞–ª–∞—Ö:"

        await context.bot.send_message(chat_id=chat_id, text=header)

        for room_id, room_bookings in sorted(bookings_by_room.items()):
            room_name = ROOM_NAMES.get(room_id, f"–ó–∞–ª {room_id}")
            is_current_room_admin = user_id in ROOM_ADMINS.get(room_id, [])

            room_header = f"\nüö™ {room_name} ({len(room_bookings)} –±—Ä–æ–Ω–∏—Ä.)"
            if is_global_admin or is_current_room_admin:
                room_header += " üëë"

            await context.bot.send_message(chat_id=chat_id, text=room_header)

            sorted_room_bookings = sorted(room_bookings, key=get_start_time)

            for i, booking in enumerate(sorted_room_bookings, 1):
                try:
                    status = str(booking.get('status', '')).lower()
                    is_cancelled = 'cancel' in status
                    show_details = is_global_admin or is_current_room_admin

                    message_parts = []

                    if is_cancelled:
                        message_parts.append("üü®üü®üü® [–û–¢–ú–ï–ù–ï–ù–û] üü®üü®üü®")

                    message_parts.append(f"#{i}: {booking.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")

                    if show_details:
                        message_parts.append(f"üìû: {booking.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

                    times = extract_times(booking.get('times', ''))
                    if times:
                        message_parts.append(f"üïí: {times}")

                    message_parts.append(f"–°—Ç–∞—Ç—É—Å: {status.capitalize()}")

                    if show_details and booking.get('comment'):
                        message_parts.append(f"üí¨: {booking['comment']}")

                    if is_cancelled:
                        message_parts.append("üü®üü®üü® –û–¢–ú–ï–ù–ï–ù–û üü®üü®üü®")

                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="\n".join(message_parts)
                    )

                    await asyncio.sleep(0.3)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{i}"
                    )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_bookings: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def handle_booking_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–ª–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    room_id = int(query.data.split("_")[2])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º room_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['booking_room_id'] = room_id
    context.user_data['booking_room_name'] = ROOM_NAMES.get(room_id, f"–ó–∞–ª {room_id}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_calendar(
        query,
        context,
        selected_room=str(room_id),
        user_id=query.from_user.id,
        purpose="booking"
    )
    return BOOKING_DATE


async def handle_booking_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    parts = query.data.split("_")
    year, month, day = int(parts[1]), int(parts[2]), int(parts[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    booking_date = f"{year}-{month:02d}-{day:02d}"
    context.user_data['booking_date'] = booking_date

    room_id = context.user_data['booking_room_id']
    room_name = context.user_data['booking_room_name']

    await query.edit_message_text(
        f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è {room_name} –Ω–∞ {day}.{month}.{year}..."
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    slots = fetch_available_slots(room_id, booking_date)

    if not slots:
        await query.edit_message_text(
            f"‚ùå –ù–∞ {day}.{month}.{year} –≤ {room_name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data=f"book_retry_date_{room_id}")]
            ])
        )
        return BOOKING_DATE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã
    context.user_data['booking_slots'] = slots
    context.user_data['selected_slots'] = []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    await show_booking_slots(query, context)
    return BOOKING_SLOTS


async def show_booking_slots(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    room_name = context.user_data['booking_room_name']
    booking_date = context.user_data['booking_date']
    slots = context.user_data['booking_slots']
    selected_slots = context.user_data.get('selected_slots', [])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    day, month, year = booking_date.split('-')[2], booking_date.split('-')[1], booking_date.split('-')[0]

    text = (
        f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        f"üè¢ –ó–∞–ª: {room_name}\n"
        f"üìÖ –î–∞—Ç–∞: {day}.{month}.{year}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ª–æ—Ç–æ–≤
    keyboard = []
    for value, label in slots:
        # –ü–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        prefix = "‚úÖ " if value in selected_slots else ""
        keyboard.append([
            InlineKeyboardButton(
                f"{prefix}{label}",
                callback_data=f"slot_toggle_{value}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    action_buttons = []
    if selected_slots:
        action_buttons.append(InlineKeyboardButton("üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="slots_confirm"))

    action_buttons.append(InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="book_retry_date"))
    action_buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="cancel_booking"))

    keyboard.append(action_buttons)

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_slot_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω—É —Å–ª–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    slot_value = query.data.split("_", 2)[2]
    selected_slots = context.user_data['selected_slots']

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
    if slot_value in selected_slots:
        selected_slots.remove(slot_value)
    else:
        selected_slots.append(slot_value)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    await show_booking_slots(query, context)
    return BOOKING_SLOTS


async def handle_slots_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ—Ç–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è."""
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
    if not context.user_data.get('selected_slots'):
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤, –Ω–µ –º–µ–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        return BOOKING_SLOTS

    text = "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ edit_message_text –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await query.edit_message_text(text)

    return GET_NAME


async def handle_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_name = update.message.text
    context.user_data['booking_name'] = user_name

    text = f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    await update.message.reply_text(text)

    return GET_PHONE


async def handle_get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    phone_number = update.message.text
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    context.user_data['booking_phone'] = phone_number

    text = "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç."
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(text, reply_markup=reply_markup)

    return GET_COMMENT


def clear_booking_data(context: ContextTypes.DEFAULT_TYPE):
    """Clears all booking-related data from user_data."""
    keys_to_clear = [
        'booking_room_id', 'booking_room_name', 'booking_date',
        'booking_slots', 'selected_slots', 'booking_name',
        'booking_phone', 'booking_comment', 'selected_room'
    ]
    for key in keys_to_clear:
        context.user_data.pop(key, None)

async def finalize_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Calls the submission function and informs the user of the result."""
    chat_id = update.effective_chat.id

    # Show a "submitting" message
    submitting_text = "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–∞–π—Ç..."
    if isinstance(update, CallbackQuery):
        await update.edit_message_text(text=submitting_text)
    else:
        await update.message.reply_text(text=submitting_text)

    # Submit the booking
    success, message = submit_booking(
        room_id=context.user_data.get('booking_room_id'),
        date_str=context.user_data.get('booking_date'),
        selected_slots=context.user_data.get('selected_slots', []),
        user_name=context.user_data.get('booking_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        phone_number=context.user_data.get('booking_phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        comment=context.user_data.get('booking_comment', '–ù–µ—Ç')
    )

    # Send the final status as a new message
    final_message = f"‚úÖ {message}" if success else f"‚ùå {message}"
    await context.bot.send_message(chat_id=chat_id, text=final_message)

    # Clean up and end
    clear_booking_data(context)
    return ConversationHandler.END

async def handle_get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Saves the comment from text and finalizes the booking."""
    context.user_data['booking_comment'] = update.message.text
    return await finalize_booking(update, context)

async def handle_skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Saves an empty comment and finalizes the booking."""
    query = update.callback_query
    await query.answer()
    context.user_data['booking_comment'] = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
    # Pass the query to the finalize function so it can edit the message
    return await finalize_booking(query, context)


async def handle_retry_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    room_id = context.user_data.get('booking_room_id')
    if not room_id:
        # –ï—Å–ª–∏ room_id –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        await show_booking_menu(query, context)
        return BOOKING_ROOM

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–Ω–æ–≤–∞
    await show_calendar(
        query,
        context,
        selected_room=str(room_id),
        user_id=query.from_user.id,
        purpose="booking"
    )
    return BOOKING_DATE


async def cancel_booking_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    clear_booking_data(context)
    await update.message.reply_text(
        "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(
            MAIN_MENU_KEYBOARD,
            resize_keyboard=True
        )
    )
    return ConversationHandler.END


async def cancel_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()

    clear_booking_data(context)

    await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await show_main_menu(query, context)
    return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a telegram message to notify the developer."""
    logger.error("Exception while handling an update:", exc_info=context.error)


def setup_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler("start", start))

    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r'(?i)^–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å$'), show_booking_menu)
        ],
        states={
            BOOKING_ROOM: [
                CallbackQueryHandler(handle_booking_room, pattern=r'^book_room_\d+$')
            ],
            BOOKING_DATE: [
                CallbackQueryHandler(handle_booking_date, pattern=r'^select_\d+_\d+_\d+_?\d*_book$')
            ],
            BOOKING_SLOTS: [
                CallbackQueryHandler(handle_slot_toggle, pattern=r'^slot_toggle_.+$'),
                CallbackQueryHandler(handle_slots_confirm, pattern=r'^slots_confirm$'),
                CallbackQueryHandler(handle_retry_date, pattern=r'^book_retry_date$'),
                CallbackQueryHandler(cancel_booking_callback, pattern=r'^cancel_booking$')
            ],
            GET_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_get_name)
            ],
            GET_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_get_phone)
            ],
            GET_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_get_comment),
                CallbackQueryHandler(handle_skip_comment, pattern=r'^skip_comment$')
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_booking_command),
            MessageHandler(filters.Regex(r'^–û—Ç–º–µ–Ω–∞$'), cancel_booking_command)
        ],
        per_message=False,
        per_user=True,
        allow_reentry=True
    )
    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ ConversationHandler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    app.add_handler(CallbackQueryHandler(handle_callback))